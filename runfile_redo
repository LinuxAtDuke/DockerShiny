#!/bin/bash

set -x

log () {
    local message="$1"
    local logfile='/var/log/shiny-server/shiny-server.log'

    echo "${message}" | tee $LOGFILE
}


mk_logs () {
    local logdir='/var/log/shiny-server'
    local logfile='shiny-server.log'

    if [[ ! -d $LOGDIR ]]
    then
        mkdir -p $LOGDIR
    fi

    if [[ ! -f ${LOGDIR}/${LOGFILE} ]]
    then
        touch ${LOGDIR}/${LOGFILE}
    fi

    chown -R shiny.shiny ${LOGDIR}/${LOGFILE}
}

add_repo () {
    # If set, clone user-provided repo

    local repo="${USER_REPO}"

    if [[ ! -z ${repo} ]]
    then
        local dir="/srv/$(echo ${repo} | awk -F/ '{print $NF}' | sed 's/.git$//')"

        if [[ ! -d ${dir} ]]
        then
            log "[WARN] - No existing shiny app found; cloning from ${repo}"

            if ! git clone $repo $dir
            then
                log "Unable to clone repo: ${repo}"
                exit 1
            fi

    else
        log "[WARN] - No USER_REPO variable specified.  Assuming mounted or built-in shiny app."
    fi
}

install_packages () {
    local dirs=

}
    if [[ ! -z $USER_REPO ]]
    then 
    
        if [[ ! -d ${DIR} ]]
        then 
            log "[WARN] - No shiny app found; cloning from ${USER_REPO}"
    
            git clone ${USER_REPO} ${DIR} \
    	|| err_out "Unable to clone repo: ${USER_REPO}"
    
            bash -x /install-packages.sh ${DIR} \
            || err_out "Failed to install post-run packages"
    
            if [[ -d /srv/shiny-server ]]
    	then 
                mv /srv/shiny-server /srv/shiny-server.bak
                ln -s ${DIR} /srv/shiny-server
            fi
        fi
    else
        warn "No USER_REPO variable specified. Assuming a mounted or built-in shiny server"
        DIRS=$(ls /srv/shiny-server)
    
        for DIR in $DIRS
        do 
           bash -x /install-packages.sh ${DIR} \
           || err_out "Failed to install post-run packages"
        done
    fi



main () {

    mk_logs

    exec /usr/bin/shiny-server >> /var/log/shiny-server.log 2>&1
}

main
